INFORMED SEARCH(A*)



''' Write a program to implement Informed search techniques
A* algorithm 

'A': [('B', 6), ('F', 3)],
    'B': [('A', 6), ('C', 3), ('D', 2)],
    'C': [('B', 3), ('D', 1), ('E', 5)],
    'D': [('B', 2), ('C', 1), ('E', 8)],
    'E': [('C', 5), ('D', 8), ('I', 5), ('J', 5)],
    'F': [('A', 3), ('G', 1), ('H', 7)],
    'G': [('F', 1), ('I', 3)],
    'H': [('F', 7), ('I', 2)],
    'I': [('E', 5), ('G', 3), ('H', 2), ('J', 3)],
}
'''

import queue

def astar(graph, heuristic, start, goal):
    open_set = queue.PriorityQueue()
    closed_set = set()

    # Priority queue with initial node
    open_set.put((0, start, []))

    while not open_set.empty():
        # Get node with the lowest cost
        current_cost, current_node, path = open_set.get()

        if current_node == goal:
            return path + [current_node]

        if current_node not in closed_set:
            closed_set.add(current_node)

            for neighbor, cost in graph[current_node]:
                if neighbor not in closed_set:
                    total_cost = current_cost + cost + heuristic[neighbor]
                    open_set.put((total_cost, neighbor, path + [current_node]))

    return None  # No path found

# Example usage:
graph = {
    'A': [('B', 3), ('C', 6), ('D', 5)],
    'B': [('A', 3), ('E', 9), ('F', 8)],
    'C': [('A', 6), ('G', 12), ('H', 14)],
    'D': [('A', 5), ('I', 5)],
    'E': [('B', 9)],
    'F': [('B', 8)],
    'G': [('C', 12)],
    'H': [('C', 14)],
    'I': [('D', 5)]
}

heuristic_values = {
    'A': 11, 'B': 12, 'C': 13,
    'D': 14, 'E': 5, 'F': 10,
    'G': 7, 'H': 8, 'I': 9
}

start_node = 'A'
goal_node = 'H'

path = astar(graph, heuristic_values, start_node, goal_node)

if path:
    print("A* Path:", path)
else:
    print("No path found.")